import io.gitlab.arturbosch.detekt.Detekt

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.dagger.hilt.android)
    alias(libs.plugins.detekt)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.ktlint)
    alias(libs.plugins.navigation.safe.args)
    alias(libs.plugins.spotless)
    alias(libs.plugins.versions)
}

android {
    namespace "com.tomg.fiiok9control"

    compileSdk 34

    defaultConfig {
        applicationId "com.tomg.fiiok9control"
        minSdk 31
        targetSdk 34
        versionCode 16
        versionName "2.0.1"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }
}

tasks.named("dependencyUpdates").configure {
    def isNonStable = { String version ->
        def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword ->
            version.toUpperCase().contains(keyword)
        }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.withType(Detekt).configureEach {
    jvmTarget = "1.8"
}

detekt {
    baseline = file("$projectDir/config/baseline.xml")
}

ktlint {
    android = true
    filter {
        exclude { element -> element.file.path.contains("generated/") }
        include("**/*.kt")
    }
}

spotless {
    kotlin {
        ratchetFrom("origin/main")
        target("**/*.kt")
        licenseHeaderFile rootProject.file("spotless/copyright.txt")
    }
}

dependencies {
    implementation project(":blelibrary")
    implementation project(":gaialibrary")
    debugImplementation libs.leakcanary
    implementation libs.bundles.implementation
    kapt libs.bundles.kapt
}
