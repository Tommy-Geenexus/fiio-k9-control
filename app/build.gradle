import io.gitlab.arturbosch.detekt.Detekt

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: "org.jetbrains.kotlin.kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "com.diffplug.spotless"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "dagger.hilt.android.plugin"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"

apply from: "../dependencies.gradle"

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.tomg.fiiok9control"
        minSdk 31
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

tasks.named("dependencyUpdates").configure {
    def isNonStable = { String version ->
        def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword ->
            version.toUpperCase().contains(keyword)
        }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.withType(Detekt).configureEach {
    jvmTarget = "1.8"
}

detekt {
    baseline = file("$projectDir/config/baseline.xml")
}

ktlint {
    android.set(true)
    disabledRules.set(["import-ordering"])
    filter {
        exclude { element -> element.file.path.contains("generated/") }
        include("**/kotlin/**")
    }
}

spotless {
    kotlin {
        target("src/*/java/**/*.kt")
        //noinspection GroovyImplicitNullArgumentCall
        ktlint()
        endWithNewline()
        licenseHeaderFile rootProject.file("spotless/copyright.txt")
    }
}

dependencies {
    implementation project(":blelibrary")
    implementation project(":gaialibrary")
    androidTestImplementation android_test_dependencies.values()
    implementation implementation_dependencies.values()
    coreLibraryDesugaring core_library_desugaring_dependencies.values()
    debugImplementation debug_implementation_dependencies.values()
    kapt kapt_dependencies.values()
    testImplementation test_dependencies.values()
}